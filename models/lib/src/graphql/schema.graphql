"""This directive allows results to be deferred during execution"""
directive @defer on FIELD

"""
Tells the service this field/object has access authorized by sigv4 signing.
"""
directive @aws_iam on OBJECT | FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by a Lambda Authorizer.
"""
directive @aws_lambda on OBJECT | FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by a Cognito User Pools token.
"""
directive @aws_cognito_user_pools(
  """List of cognito user pool groups which have access on this field"""
  cognito_groups: [String]
) on OBJECT | FIELD_DEFINITION

"""Directs the schema to enforce authorization on a field"""
directive @aws_auth(
  """List of cognito user pool groups which have access on this field"""
  cognito_groups: [String]
) on FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by an OIDC token.
"""
directive @aws_oidc on OBJECT | FIELD_DEFINITION

"""
Tells the service which subscriptions will be published to when this mutation is
called. This directive is deprecated use @aws_susbscribe directive instead.
"""
directive @aws_publish(
  """
  List of subscriptions which will be published to when this mutation is called.
  """
  subscriptions: [String]
) on FIELD_DEFINITION

"""Tells the service which mutation triggers this subscription."""
directive @aws_subscribe(
  """
  List of mutations which will trigger this subscription when they are called.
  """
  mutations: [String]
) on FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by an API key.
"""
directive @aws_api_key on OBJECT | FIELD_DEFINITION

"""
The `AWSDateTime` scalar type provided by AWS AppSync, represents a valid
***extended*** [ISO 8601 DateTime](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations)
string. In other words, this scalar type accepts datetime strings of the form
`YYYY-MM-DDThh:mm:ss.SSSZ`.  The scalar can also accept "negative years" of the
form `-YYYY` which correspond to years before `0000`. For example,
"**-2017-01-01T00:00Z**" and "**-9999-01-01T00:00Z**" are both valid datetime
strings.  The field after the two digit seconds field is a nanoseconds field. It
can accept between 1 and 9 digits. So, for example,
"**1970-01-01T12:00:00.2Z**", "**1970-01-01T12:00:00.277Z**" and
"**1970-01-01T12:00:00.123456789Z**" are all valid datetime strings.  The
seconds and nanoseconds fields are optional (the seconds field must be specified
if the nanoseconds field is to be used).  The [time zone
offset](https://en.wikipedia.org/wiki/ISO_8601#Time_zone_designators) is
compulsory for this scalar. The time zone offset must either be `Z`
(representing the UTC time zone) or be in the format `Â±hh:mm:ss`. The seconds
field in the timezone offset will be considered valid even though it is not part
of the ISO 8601 standard.
"""
scalar AWSDateTime

"""
The `AWSTimestamp` scalar type provided by AWS AppSync, represents the number of
seconds that have elapsed since `1970-01-01T00:00Z`. Negative values are also
accepted and these represent the number of seconds till `1970-01-01T00:00Z`. 
Timestamps are serialized and deserialized as integers. The minimum supported
timestamp value is **`-31557014167219200`** which corresponds to
`-1000000000-01-01T00:00Z`. The maximum supported timestamp value is
**`31556889864403199`** which corresponds to
`1000000000-12-31T23:59:59.999999999Z`.
"""
scalar AWSTimestamp

type Comment {
  id: ID!
  owner: String
  comment: String!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  by: User
  habit: Habit!
}

input CreateCommentInput {
  id: ID
  owner: String
  comment: String!
  _version: Int
  habitCommentsId: ID
  commentHabitId: ID!
}

input CreateHabitInput {
  id: ID
  tagline: String!
  category: String!
  ups: Int
  downs: Int
  owner: String
  _version: Int
}

input CreateUserInput {
  username: String!
  name: String
  avatar: S3ObjectInput
  upvotedHabits: [ID!]
  downvotedHabits: [ID!]
  _version: Int
}

input DeleteCommentInput {
  id: ID!
  _version: Int
}

input DeleteHabitInput {
  id: ID!
  _version: Int
}

input DeleteUserInput {
  username: String!
  _version: Int
}

type Habit {
  id: ID!
  tagline: String!
  category: String!
  owner: String
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  author: User
  ups: Int
  downs: Int
  comments(filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelCommentConditionInput {
  comment: ModelStringInput
  and: [ModelCommentConditionInput]
  or: [ModelCommentConditionInput]
  not: ModelCommentConditionInput
}

type ModelCommentConnection {
  items: [Comment]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelCommentFilterInput {
  id: ModelIDInput
  owner: ModelStringInput
  comment: ModelStringInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelHabitConditionInput {
  tagline: ModelStringInput
  category: ModelStringInput
  ups: ModelIntInput
  downs: ModelIntInput
  and: [ModelHabitConditionInput]
  or: [ModelHabitConditionInput]
  not: ModelHabitConditionInput
}

type ModelHabitConnection {
  items: [Habit]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelHabitFilterInput {
  id: ModelIDInput
  tagline: ModelStringInput
  category: ModelStringInput
  ups: ModelIntInput
  downs: ModelIntInput
  owner: ModelStringInput
  and: [ModelHabitFilterInput]
  or: [ModelHabitFilterInput]
  not: ModelHabitFilterInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIntKeyConditionInput {
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelUserConditionInput {
  name: ModelStringInput
  upvotedHabits: ModelIDInput
  downvotedHabits: ModelIDInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

type ModelUserConnection {
  items: [User]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelUserFilterInput {
  username: ModelStringInput
  name: ModelStringInput
  upvotedHabits: ModelIDInput
  downvotedHabits: ModelIDInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

type Mutation {
  vote(habitId: ID!, type: VoteType!): VoteResult
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createHabit(input: CreateHabitInput!, condition: ModelHabitConditionInput): Habit
  updateHabit(input: UpdateHabitInput!, condition: ModelHabitConditionInput): Habit
  deleteHabit(input: DeleteHabitInput!, condition: ModelHabitConditionInput): Habit
  createComment(input: CreateCommentInput!, condition: ModelCommentConditionInput): Comment
  updateComment(input: UpdateCommentInput!, condition: ModelCommentConditionInput): Comment
  deleteComment(input: DeleteCommentInput!, condition: ModelCommentConditionInput): Comment
}

type Query {
  searchUsers(filter: SearchableUserFilterInput, sort: SearchableUserSortInput, limit: Int, nextToken: String, from: Int): SearchableUserConnection
  syncUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelUserConnection
  getUser(username: String!): User
  listUsers(username: String, filter: ModelUserFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelUserConnection
  habitsByCategory(category: String, ups: ModelIntKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelHabitFilterInput, limit: Int, nextToken: String): ModelHabitConnection
  searchHabits(filter: SearchableHabitFilterInput, sort: SearchableHabitSortInput, limit: Int, nextToken: String, from: Int): SearchableHabitConnection
  syncHabits(filter: ModelHabitFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelHabitConnection
  getHabit(id: ID!): Habit
  listHabits(filter: ModelHabitFilterInput, limit: Int, nextToken: String): ModelHabitConnection
  getComment(id: ID!): Comment
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection
  syncComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelCommentConnection
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
}

input S3ObjectInput {
  bucket: String!
  region: String!
  key: String!
}

input SearchableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input SearchableFloatFilterInput {
  ne: Float
  gt: Float
  lt: Float
  gte: Float
  lte: Float
  eq: Float
  range: [Float]
}

type SearchableHabitConnection {
  items: [Habit]
  nextToken: String
  total: Int
}

input SearchableHabitFilterInput {
  id: SearchableIDFilterInput
  tagline: SearchableStringFilterInput
  category: SearchableStringFilterInput
  ups: SearchableIntFilterInput
  downs: SearchableIntFilterInput
  owner: SearchableStringFilterInput
  and: [SearchableHabitFilterInput]
  or: [SearchableHabitFilterInput]
  not: SearchableHabitFilterInput
}

enum SearchableHabitSortableFields {
  id
  tagline
  category
  ups
  downs
  owner
}

input SearchableHabitSortInput {
  field: SearchableHabitSortableFields
  direction: SearchableSortDirection
}

input SearchableIDFilterInput {
  ne: ID
  gt: ID
  lt: ID
  gte: ID
  lte: ID
  eq: ID
  match: ID
  matchPhrase: ID
  matchPhrasePrefix: ID
  multiMatch: ID
  exists: Boolean
  wildcard: ID
  regexp: ID
  range: [ID]
}

input SearchableIntFilterInput {
  ne: Int
  gt: Int
  lt: Int
  gte: Int
  lte: Int
  eq: Int
  range: [Int]
}

enum SearchableSortDirection {
  asc
  desc
}

input SearchableStringFilterInput {
  ne: String
  gt: String
  lt: String
  gte: String
  lte: String
  eq: String
  match: String
  matchPhrase: String
  matchPhrasePrefix: String
  multiMatch: String
  exists: Boolean
  wildcard: String
  regexp: String
  range: [String]
}

type SearchableUserConnection {
  items: [User]
  nextToken: String
  total: Int
}

input SearchableUserFilterInput {
  username: SearchableStringFilterInput
  name: SearchableStringFilterInput
  upvotedHabits: SearchableIDFilterInput
  downvotedHabits: SearchableIDFilterInput
  and: [SearchableUserFilterInput]
  or: [SearchableUserFilterInput]
  not: SearchableUserFilterInput
}

enum SearchableUserSortableFields {
  username
  name
  upvotedHabits
  downvotedHabits
}

input SearchableUserSortInput {
  field: SearchableUserSortableFields
  direction: SearchableSortDirection
}

type Subscription {
  subscribeToUser(username: String!): User
  subscribeToVotes: VoteResult
  onCreateHabit: Habit
  onUpdateHabit: Habit
  onDeleteHabit: Habit
  onCreateComment: Comment
  onUpdateComment: Comment
  onDeleteComment: Comment
}

input UpdateCommentInput {
  id: ID!
  owner: String
  comment: String
  _version: Int
  habitCommentsId: ID
  commentHabitId: ID
}

input UpdateHabitInput {
  id: ID!
  tagline: String
  category: String
  ups: Int
  downs: Int
  owner: String
  _version: Int
}

input UpdateUserInput {
  username: String!
  name: String
  avatar: S3ObjectInput
  upvotedHabits: [ID!]
  downvotedHabits: [ID!]
  _version: Int
}

type User {
  username: String!
  name: String
  avatar: S3Object
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  upvotedHabits: [ID!]
  downvotedHabits: [ID!]
  habits(filter: ModelHabitFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelHabitConnection
  comments(filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
}

type VoteResult {
  habit: Habit
  user: User
}

enum VoteType {
  upvote
  downvote
  removeUpvote
  removeDownvote
}

