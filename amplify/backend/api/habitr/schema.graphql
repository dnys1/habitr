type User @model(subscriptions: null)
    @key(fields: ["username"])                                              # Set the primary key/index to "username"
    @auth(rules: [
        { allow: groups, groups: ["admin"] }                                # Unrestricted access to members of the "admin" user pool group
        { allow: public }                                                   # Unrestricted access to API key (used in Lambdas)
        { allow: private, operations: [read] }                              # Read access for all authenticated Cognito users
        { allow: owner, ownerField: "username", operations: [update] }      # Read and update access for owners (only admin + API key can create)
    ])
    @searchable {
    username: String!
    displayUsername: String
    name: String
    avatar: S3Object
    comments: [Comment!]
        @connection(keyName: "commentsByUser", fields: ["username"])
    habits: [Habit!]
        @connection(keyName: "habitsByUser", fields: ["username"])
    upvotedHabits: [ID!]                                                    # Restrict viewing to owners and updates to admins
        @auth(rules: [
            { allow: groups, groups: ["admin"] }
            { allow: public }
            { allow: owner, ownerField: "username", operations: [read] }
        ])
    downvotedHabits: [ID!]                                                  # Restrict viewing to owners and updates to admins
        @auth(rules: [
            { allow: groups, groups: ["admin"] }
            { allow: public }
            { allow: owner, ownerField: "username", operations: [read] }
        ])
}

enum Category { Health, Finance, Productivity, Relationships }

type Habit @model
    @key(name: "habitsByCategory", fields: ["category", "ups"], queryField: "habitsByCategory")
    @key(name: "habitsByUser", fields: ["owner"])
    @auth(rules: [
        { allow: groups, groups: ["admin"] }                                # Unrestricted access to members of the "admin" user pool group
        { allow: public }                                                   # Unrestricted access to API key (used in Lambdas)
        { allow: private, operations: [read] }                              # Read access for all authenticated users
        { allow: owner, operations: [create, delete] }                      # Read, create, and delete access for owners (habits cannot be updated once created)
    ])
    @searchable {
    id: ID!
    tagline: String!
    category: Category!
    details: String
    ups: Int
        @auth(rules: [                                                      # Restrict mutations of `ups` to admin + API key
            { allow: public }
            { allow: private, operations: [read] }
            { allow: groups, groups: ["admin"] }
            { allow: owner, operations: [create] }
        ])
    downs: Int
        @auth(rules: [                                                      # Restrict mutations of `downs` to admin + API key
            { allow: public }
            { allow: private, operations: [read] }
            { allow: groups, groups: ["admin"] }
            { allow: owner, operations: [create] }
        ])
    owner: String
    author: User
        @connection(fields: ["owner"])
    comments: [Comment!]
        @connection(keyName: "commentsByHabit", fields: ["id"])
}

type Comment @model
    @key(name: "commentsByUser", fields: ["owner"])
    @key(name: "commentsByHabit", fields: ["habitId"])
    @auth(rules: [
        { allow: groups, groups: ["admin"] }                                # Unrestricted access to members of the "admin" user pool group
        { allow: public }                                                   # Unrestricted access to API key (used in Lambdas)
        { allow: private, operations: [read] }                              # Read access for all authenticated users
        { allow: owner, operations: [create, delete, update] }              # Read, create, update, and delete access for owners
    ]) {
    id: ID!
    habitId: ID!
    habit: Habit
        @connection(fields: ["habitId"])
    owner: String
    by: User
        @connection(fields: ["owner"])
    comment: String!
}

enum VoteType { upvote, downvote, removeUpvote, removeDownvote }

type VoteResult {
    habit: Habit
    user: User
}

enum AccessLevel { guest, private, protected }

type S3Object {
  bucket: String!
  region: String!
  key: String!
  cognitoId: String
  accessLevel: AccessLevel                                                          # Defaults to `guest`
}   

type Mutation {
    vote(habitId: ID!, type: VoteType!): VoteResult                                 # Custom resolver for atomic voting operations
}

type Subscription {
    subscribeToUser(username: String!): User
        @aws_subscribe(mutations: ["updateUser"])
        @aws_api_key
        @aws_cognito_user_pools
    subscribeToVotes: VoteResult
        @aws_subscribe(mutations: ["vote"])
        @aws_api_key
        @aws_cognito_user_pools
}